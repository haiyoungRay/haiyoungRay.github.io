(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{333:function(t,e,a){"use strict";a.r(e);var l=a(5),s=Object(l.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"docker-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-是什么"}},[t._v("#")]),t._v(" Docker 是什么")]),t._v(" "),a("ul",[a("li",[t._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。")]),t._v(" "),a("li",[t._v("Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样")])]),t._v(" "),a("h2",{attrs:{id:"docker和虚拟机-kvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker和虚拟机-kvm"}},[t._v("#")]),t._v(" Docker和虚拟机(KVM)")]),t._v(" "),a("ul",[a("li",[t._v("启动时间\n"),a("ul",[a("li",[t._v("Docker秒级启动")]),t._v(" "),a("li",[t._v("KVM分钟级启动")])])]),t._v(" "),a("li",[t._v("轻量级 容器镜像通常以M为单位，虚拟机以G为单位，容器资源占用小，要比虚拟要部署更快速\n"),a("ul",[a("li",[t._v("容器共享宿主机内核，系统级虚拟化，占用资源少，容器性能基本接近物理机")]),t._v(" "),a("li",[t._v("虚拟机需要虚拟化一些设备，具有完整的OS,虚拟机开销大，因而降低性能，没有容器性能好")])])]),t._v(" "),a("li",[t._v("安全性\n"),a("ul",[a("li",[t._v("由于共享宿主机内核，只是进程隔离，因此隔离性和稳定性不如虚拟机，容器具有一定权限访问宿主机内核，存在一下安全隐患")])])]),t._v(" "),a("li",[t._v("使用要求\n"),a("ul",[a("li",[t._v("KVM基于硬件的完全虚拟化，需要硬件CPU虚拟化技术支持")]),t._v(" "),a("li",[t._v("容器共享宿主机内核，可运行在主机的Linux的发行版，不用考虑CPU是否支持虚拟化技术")])])])]),t._v(" "),a("h2",{attrs:{id:"docker应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker应用场景"}},[t._v("#")]),t._v(" Docker应用场景")]),t._v(" "),a("ul",[a("li",[t._v("节省项目环境部署时间\n"),a("ul",[a("li",[t._v("单项目打包")]),t._v(" "),a("li",[t._v("整套项目打包")]),t._v(" "),a("li",[t._v("新开源技术")])])]),t._v(" "),a("li",[t._v("环境一致性")]),t._v(" "),a("li",[t._v("持续集成")]),t._v(" "),a("li",[t._v("微服务")]),t._v(" "),a("li",[t._v("弹性伸缩")])]),t._v(" "),a("h2",{attrs:{id:"docker-体系结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-体系结构"}},[t._v("#")]),t._v(" Docker 体系结构")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("containerd")]),t._v("是一个守护进程，使用runc管理容器，向Docker Engine提供接口")]),t._v(" "),a("li",[a("code",[t._v("shim")]),t._v("只负责管理一个容器")]),t._v(" "),a("li",[a("code",[t._v("runC")]),t._v("是一个轻量级工具，只用来运行容器")])]),t._v(" "),a("docker-test1"),t._v(" "),a("h2",{attrs:{id:"docker内部组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker内部组件"}},[t._v("#")]),t._v(" Docker内部组件")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("namespaces")]),t._v("命名空间，Linux内核提供的一种对进程资源隔离的机制，例如进程、网络、挂载等资源")]),t._v(" "),a("li",[a("code",[t._v("cgroups")]),t._v("控制组,linux内核提供的一种限制进程资源的机制，例如cpu 内存等资源")]),t._v(" "),a("li",[a("code",[t._v("unonFS")]),t._v("联合文件系统，支持将不同位置的目录挂载到同一虚拟文件系统，形成一种分层的模型")])]),t._v(" "),a("h2",{attrs:{id:"docker安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[t._v("#")]),t._v(" Docker安装")]),t._v(" "),a("ul",[a("li",[t._v("docker分为企业版(EE)和社区版(CE)\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker-ce"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("hub.docker"),a("OutboundLink")],1)])])])]),t._v(" "),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y yum-utils   device-mapper-persistent-data   lvm2\nyum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo\nyum-config-manager --enable docker-ce-nightly "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#要每日构建版本的 Docker CE")]),t._v("\nyum-config-manager --enable docker-ce-test  \nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" docker-ce docker-ce-cli containerd.io\n")])])]),a("h3",{attrs:{id:"启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[t._v("#")]),t._v(" 启动")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("systemctl start docker\n")])])]),a("h3",{attrs:{id:"查看docker版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看docker版本"}},[t._v("#")]),t._v(" 查看Docker版本")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker version\ndocker info\n")])])]),a("h3",{attrs:{id:"卸载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卸载"}},[t._v("#")]),t._v(" 卸载")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker info\nyum remove docker\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf /var/lib/docker\n")])])]),a("h2",{attrs:{id:"docker架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker架构"}},[t._v("#")]),t._v(" Docker架构")]),t._v(" "),a("docker-test2"),t._v(" "),a("h2",{attrs:{id:"阿里云加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阿里云加速"}},[t._v("#")]),t._v(" 阿里云加速")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://promotion.aliyun.com/ntms/act/kubernetes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("镜像仓库"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcr.console.aliyun.com%2Fcn-hangzhou%2Finstances%2Fmirrors&lang=en",target:"_blank",rel:"noopener noreferrer"}},[t._v("镜像加速器"),a("OutboundLink")],1)])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /etc/docker\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" /etc/docker/daemon.json "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<-")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'EOF\'\n{\n  "registry-mirrors": ["https://fwvjnv59.mirror.aliyuncs.com"]\n}\nEOF')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart docker\n")])])]),a("h2",{attrs:{id:"image镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image镜像"}},[t._v("#")]),t._v(" image镜像")]),t._v(" "),a("ul",[a("li",[t._v("Docker把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成Docker容器")]),t._v(" "),a("li",[t._v("image文件可以看作是容器的模板")]),t._v(" "),a("li",[t._v("Docker根据image 文件生成容器的实例")]),t._v(" "),a("li",[t._v("同一个image文件，可以生成多个同时运行的容器实例")]),t._v(" "),a("li",[t._v("镜像不是一个单一的文件，而是有多层")]),t._v(" "),a("li",[t._v("容器其实就是在镜像的最上面加了一层读写层，在运行容器里做的任何文件改动，都会写到这个读写层里。如果容器删除了，最上面的读写层也就删除了，改动也就丢失了")]),t._v(" "),a("li",[t._v("我们可以通过"),a("code",[t._v("docker history <ID/NAME>")]),t._v(" 查看镜像中各层内容及大小，每层对应着"),a("code",[t._v("Dockerfile")]),t._v("中的一条指令")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("案例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ls")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("查看全部镜像")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker image ls")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("search")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("查找镜像")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker search [imageName]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("history")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("查看镜像历史")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker history [imageName]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("inspect")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示一个或多个镜像详细信息")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker inspect [imageName]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("pull")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("拉取镜像")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker pull [imageName]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("push")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("推送一个镜像到镜像仓库")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker push [imageName]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("rmi")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("删除镜像")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker rmi [imageName] docker image rmi 2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("prune")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("移除未使用的镜像，没有被标记或补任何容器引用")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker image prune")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("tag")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("标记本地镜像，将其归入某一仓库")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker image tag [imageName] [username]/[repository]:[tag]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("export")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("导出容器文件系统tar归档文件创建镜像")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker export -o mysqlv1.tar a404c6c174a2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("import")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("导入容器快照文件系统tar归档文件创建镜像")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker import mysqlv1.tar zf/mysql:v2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("save")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("保存一个或多个镜像到一个tar归档文件")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker save -o mysqlv2.tar zf/mysqlv2:v3")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("load")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("加载镜像存储文件来自tar归档或标准输入")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker load -i mysqlv2.tar")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("build")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("根据Dockerfile构建镜像")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("用户既可以使用"),a("code",[t._v("docker load")]),t._v("来导入镜像存储文件到本地镜像库，也可以使用"),a("code",[t._v("docker import")]),t._v("来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。")])]),t._v(" "),a("h3",{attrs:{id:"查看镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看镜像"}},[t._v("#")]),t._v(" 查看镜像")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker image "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("字段")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("REPOSITORY")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("仓库地址")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("TAG")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("标签")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("IMAGE_ID")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("镜像ID")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("CREATED")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("创建时间")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("SIZE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("镜像大小")])])])]),t._v(" "),a("h3",{attrs:{id:"查找镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找镜像"}},[t._v("#")]),t._v(" 查找镜像")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker search ubuntu\n")])])]),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("字段")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("NAME")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("名称")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("DESCRIPTION")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("描述")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("STARTS")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("星星的数量")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("OFFICIAL")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否官方源")])])])]),t._v(" "),a("h3",{attrs:{id:"拉取镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取镜像"}},[t._v("#")]),t._v(" 拉取镜像")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker  pull docker.io/hello-world\n")])])]),a("ul",[a("li",[t._v("docker image pull是抓取 image 文件的命令")]),t._v(" "),a("li",[a("code",[t._v("docker.io/hello-world")]),t._v("是image文件在仓库里面的位置，其中"),a("code",[t._v("docker.io")]),t._v("是image的作者，"),a("code",[t._v("hello-world")]),t._v("是image文件的名字")]),t._v(" "),a("li",[t._v("Docker 官方提供的"),a("code",[t._v("image")]),t._v("文件，都放在docker.io组里面，所以它的是默认组，可以省略"),a("code",[t._v("docker image pull hello-world")])])]),t._v(" "),a("h3",{attrs:{id:"删除镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像"}},[t._v("#")]),t._v(" 删除镜像")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker rmi  hello-world\n")])])]),a("h2",{attrs:{id:"容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker run")]),t._v(" 命令会从image文件，生成一个正在运行的容器实例。")]),t._v(" "),a("li",[a("code",[t._v("docker container run")]),t._v("命令具有自动抓取image文件的功能。如果发现本地没有指定的image文件，就会从仓库自动抓取")]),t._v(" "),a("li",[t._v("输出提示以后，hello world就会停止运行，容器自动终止。")]),t._v(" "),a("li",[t._v("有些容器不会自动终止")]),t._v(" "),a("li",[t._v("image 文件生成的容器实例，本身也是一个文件，称为"),a("code",[t._v("容器文件")])]),t._v(" "),a("li",[a("code",[t._v("容器生成")]),t._v("，就会同时存在两个文件：image文件和容器文件")]),t._v(" "),a("li",[t._v("关闭容器并不会删除容器文件，只是容器停止运行")])]),t._v(" "),a("h3",{attrs:{id:"命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("案例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("run")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从镜像运行一个容器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker run ubuntu /bin/echo 'hello-world'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ls")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("列出容器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker container ls")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("inspect")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示一个或多个容器详细信息")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker inspect")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("attach")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker attach")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("stats")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示容器资源使用统计")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker container stats")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("top")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示一个容器运行的进程")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker container top")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("update")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示一个容器运行的进程")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker container update")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("port")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("更新一个或多个容器配置")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker container port")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ps")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("查看当前运行的容器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker ps -a -l")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("kill [containerId]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("终止容器(发送SIGKILL )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker kill [containerId]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("rm [containerId]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("删除容器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker rm [containerId]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("start [containerId]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("启动已经生成、已经停止运行的容器文件")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker start [containerId]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("stop [containerId]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("终止容器运行 (发送 SIGTERM )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker stop [containerId]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("logs [containerId]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("查看 docker 容器的输出")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker logs [containerId]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("exec [containerId]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("进入一个正在运行的 docker 容器执行命令")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker container exec -it [containerID] /bin/bash")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("cp [containerId]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从正在运行的 Docker 容器里面，将文件拷贝到本机")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("docker container cp [containID]:app/package.json .")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("commit [containerId]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("创建一个新镜像来自一个容器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),a("h3",{attrs:{id:"启动容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动容器"}},[t._v("#")]),t._v(" 启动容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker run ubuntu /bin/echo "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),t._v("\n")])])]),a("ul",[a("li",[t._v("docker: Docker 的二进制执行文件。")]),t._v(" "),a("li",[t._v("run:与前面的 docker 组合来运行一个容器。")]),t._v(" "),a("li",[t._v("ubuntu指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。")]),t._v(" "),a("li",[t._v('/bin/echo "Hello world": 在启动的容器里执行的命令')])]),t._v(" "),a("blockquote",[a("p",[t._v('Docker以ubuntu镜像创建一个新容器，然后在容器里执行 bin/echo "Hello world"，然后输出结果')])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("参数")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-i --interactive")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("交互式")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-t --tty")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("分配一个伪终端")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-d --detach")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("运行容器到后台")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-a --attach list")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("附加到运行的容器")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-e --env list")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("设置环境变量")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-p --publish list")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("发布容器端口到主机")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-P")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("--publish-all")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("--mount mount")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("挂载宿主机分区到容器")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-v,--volumn list")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("挂载宿主机分区到容器")])])])]),t._v(" "),a("h3",{attrs:{id:"查看容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看容器"}},[t._v("#")]),t._v(" 查看容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\ndocker -a\ndocker -l\n")])])]),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("字段")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("CONTAINER ID")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("容器ID")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("IMAGE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用的镜像")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("COMMAND")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用的命令")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("CREATED")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("创建时间")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("STATUS")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("状态")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("PORTS")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("端口号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("NAMES")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("自动分配的名称")])])])]),t._v(" "),a("h3",{attrs:{id:"运行交互式的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行交互式的容器"}},[t._v("#")]),t._v(" 运行交互式的容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker run -i -t ubuntu /bin/bash\n")])])]),a("ul",[a("li",[t._v("-t=--interactive 在新容器内指定一个伪终端或终端。")]),t._v(" "),a("li",[t._v("-i=--tty 允许你对容器内的标准输入 (STDIN) 进行交互。")])]),t._v(" "),a("blockquote",[a("p",[t._v("我们可以通过运行"),a("code",[t._v("exit命令")]),t._v("或者使用"),a("code",[t._v("CTRL+D")]),t._v("来退出容器。")])]),t._v(" "),a("h3",{attrs:{id:"后台运行容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后台运行容器"}},[t._v("#")]),t._v(" 后台运行容器")]),t._v(" "),a("div",{staticClass:"language-docker extra-class"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[t._v("docker run --detach centos ping www.baidu.com\ndocker ps \ndocker logs --follow ad04d9acde94\ndocker stop ad04d9acde94\n")])])]),a("h3",{attrs:{id:"kill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kill"}},[t._v("#")]),t._v(" kill")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" 5a5c3a760f61\n")])])]),a("blockquote",[a("p",[t._v("kill是不管容器同不同意，直接执行"),a("code",[t._v("kill -9")]),t._v("，强行终止；"),a("code",[t._v("stop")]),t._v("的话，首先给容器发送一个"),a("code",[t._v("TERM")]),t._v("信号，让容器做一些退出前必须的保护性、安全性操作，然后让容器自动停止运行，如果在一段时间内，容器还是没有停止，再进行"),a("code",[t._v("kill -9")]),t._v("，强行终止")])]),t._v(" "),a("h3",{attrs:{id:"删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[t._v("#")]),t._v(" 删除容器")]),t._v(" "),a("ul",[a("li",[t._v("docker rm 删除容器")]),t._v(" "),a("li",[t._v("docker rmi  删除镜像")]),t._v(" "),a("li",[t._v("docker rm $(docker ps -a -q)")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" 5a5c3a760f61\n")])])]),a("h3",{attrs:{id:"启动容器-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动容器-2"}},[t._v("#")]),t._v(" 启动容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker start "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containerId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"停止容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#停止容器"}},[t._v("#")]),t._v(" 停止容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker stop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containerId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"进入一个容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入一个容器"}},[t._v("#")]),t._v(" 进入一个容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker attach "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"进入一个正在运行中的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入一个正在运行中的容器"}},[t._v("#")]),t._v(" 进入一个正在运行中的容器")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker container -exec -it "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" /bin/bash\n")])])]),a("h3",{attrs:{id:"拷贝文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拷贝文件"}},[t._v("#")]),t._v(" 拷贝文件")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker container "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containerID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" /readme.md "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("h3",{attrs:{id:"自动删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动删除"}},[t._v("#")]),t._v(" 自动删除")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker run --rm ubuntu /bin/bash\n")])])])],1)}),[],!1,null,null,null);e.default=s.exports}}]);